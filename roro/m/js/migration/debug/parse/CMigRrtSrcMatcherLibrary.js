
// デバッグファイル読み込みチェック
DebugFileIncludeCheck();

// パーサファイル読み込みチェック
ParserFileIncludeCheck();





function CMigRrtSrcMatcherLibrary (refKeywordInfoListLibrary) {

	// キーワード情報リストライブラリ
	this.keywordInfoListLibrary = refKeywordInfoListLibrary;

	// データ配列
	this.dataArray = [];



	/**
	 * IDを登録する.
	 * @param idName 定数名
	 * @return 登録された定数値
	 */
	this.RegisterId = function (idName) {
		return CGlobalConstManager.DefineEnum("EnumMigRrtSrcMatcherId", [idName]);
	};



	/**
	 * マッチャを取得する.
	 * @param id ID
	 * @return マッチャ
	 */
	this.Get = function (id) {

		var idx = 0;

		for (idx = 0; idx < this.dataArray.length; idx++) {
			if (this.dataArray[idx].id == id) {
				return this.dataArray[idx];
			}
		}

		return undefined;
	};



	this.ForEach = function (procF) {

		var idx = 0;

		for (idx = 0; idx < this.dataArray.length; idx++) {
			procF(this.dataArray[idx], idx, this.dataArray);
		}
	};



	/**
	 * 無名イニシャライザ.
	 */
	(function () {

		var refThis = this;

		var funcMakeRegTextFragConstDefTextList = function (objConstDefF, bPseudoF, funcGetTextF) {

			var idxF = 0;
			var nameF = "";
			var valueF = 0;
			var arrayF = [];
			var funcGetTextArrayF = function (idxF, nameF, valueF) {
				arrayF.push("(?:" + funcGetTextF(valueF) + ")");
			};

			if (!bPseudoF) {
				objConstDefF.For(funcGetTextArrayF);
			}
			else {
				objConstDefF.PseudoFor(funcGetTextArrayF);
			}

			return ("(?:" + arrayF.join("|") + ")");
		};

		var regTextFragProbText = funcMakeRegTextFragConstDefTextList(EnumMigProbId, true, MigGetProbText);
		var regTextFragWordLevel = "(?:(?:Lv)|(?:レベル))";
		var regTextFragWordBaseLevel = "(?:(?:Base)|(?:ベース))" + regTextFragWordLevel;
		var regTextFragWordRefine = "精(?:錬|練)";
		var regTextFragOptMonster = "(?:モンスター)?";
		var regTextFragSubjectSuffix = "(?:(?:で)|(?:に)|(?:に対する)|(?:の)|(?:への)|(?:からの?))?";
		var regTextFragActivate = "発動(?:する)?";

		var funcRegister = function (idNameF, kindF, spidNameF, sourceArrayF, funcExtraCheckF) {
			refThis.dataArray.push(new CMigRrtSrcMatcher(refThis, refThis.RegisterId(idNameF), kindF, spidNameF, sourceArrayF, funcExtraCheckF));
		};

		var funcRegisterCore = function (idNameF, sourceArrayF) {
			funcRegister(idNameF, MIG_RRTSRC_MATCHER_KIND_CORE, "", sourceArrayF);
		};

		var funcRegisterData = function (idNameF, sourceArrayF, funcExtraCheckF) {
			funcRegister(idNameF, MIG_RRTSRC_MATCHER_KIND_DATA, "", sourceArrayF, funcExtraCheckF);
		};

		var funcRegisterCondition = function (idNameF, spidF, sourceArrayF) {
			funcRegister(idNameF, MIG_RRTSRC_MATCHER_KIND_CONDITION, EnumMigEquipableSpId.GetDefinedName(spidF), sourceArrayF);
		};

		var funcRegisterAttribute = function (idNameF, spidF, sourceArrayF) {
			funcRegister(idNameF, MIG_RRTSRC_MATCHER_KIND_ATTRIBUTE, EnumMigEquipableSpId.GetDefinedName(spidF), sourceArrayF);
		};

		var funcRegisterEffect = function (idNameF, spidF, sourceArrayF) {
			funcRegister(idNameF, MIG_RRTSRC_MATCHER_KIND_EFFECT, EnumMigEquipableSpId.GetDefinedName(spidF), sourceArrayF);
		};

		var funcRegisterStatic = function (idNameF, spidF, sourceArrayF) {
			funcRegister(idNameF, MIG_RRTSRC_MATCHER_KIND_STATIC, EnumMigEquipableSpId.GetDefinedName(spidF), sourceArrayF);
		};

		var funcRegisterListData = function (idNameF, spidF, sourceArrayF) {
			funcRegister(idNameF, MIG_RRTSRC_MATCHER_KIND_LIST_DATA, EnumMigEquipableSpId.GetDefinedName(spidF), sourceArrayF);
		};

		var __MUST = function (idF) {
			return "<$$" + idF + "$$>";
		};

		var __OPT = function (idF) {
			return "<??" + idF + "??>";
		};

		var __LIST = function (idF, bCaptureF, bMultipleF) {
			return refThis.keywordInfoListLibrary.Get(idF).CreateRegText(false, bCaptureF, bMultipleF);
		};




		// ルート要素用仮想ＩＤを定義
		CGlobalConstManager.DefinePseudoEnum("EnumMigRrtSrcMatcherId", ["MIG_RRTSRC_DUMMY_MATCHER_ROOT"], -1, 0);



		// 汎用コアマッチャ
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_SPACE", ["\\s+"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_STRING", ["(.+)"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_SIGN", ["((?:\\+)|(?:＋)|(?:\\-)|(?:－))"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_INTEGER", ["(\\d+)"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_NUMBER", ["(\\d+(?:\\.\\d+)?)"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_DIMENSION", ["((?:%)|(?:秒))"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_VARY_DIRECT", ["((?:増加)|(?:向上)|(?:減少))(?:する)?"]);
		//
		// TODO: これ、MIG_RRTSRC_CORE_MATCHER_NAME_LIST に統一できないか？
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_BLOCKED_LIST", ["((?:" + "(?:\\[[^\\]]+\\])" + "|" + "(?:、)|(?:,)|(?:，)|(?:・)" + ")+)"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_NOT_BLOCKED_LIST", ["((?:" + "(?:[^\\[\\]])" + "|" + "(?:、)|(?:,)|(?:，)|(?:・)" + ")+)"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_NAME_LIST",
			[
			"("

				// 名称の両端に [] がついてるケースへの対応
				+ "(?:(?:"
					+ "(?:\\[.+\\](?:と)?)"
					+ "|"
					+ "(?:、)|(?:,)|(?:，)|(?:・)"
				+ ")+)"

				+ "|"

				// 名称の両端に [] がないケースへの対応
				+ "(?:(?:"
					+ "(?:[^\\[\\]])"
					+ "|"
					+ "(?:、)|(?:,)|(?:，)|(?:・)"
				+ ")+)"

			 + ")",

			"(?:のセット)?"
			]
		);
		//
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_SPACED_LIST", ["((?:" + "(?:[^\\[\\s\\]])" + "|" + "(?: )|(?:　)" + ")+)"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_COMMA", [__LIST(MIG_RRTSRC_KEYWORD_LIST_COMMA, false, false)]);

		// コアマッチャ
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_METHOD", [__LIST(MIG_RRTSRC_KEYWORD_LIST_METHOD, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_TIMING", [__LIST(MIG_RRTSRC_KEYWORD_LIST_TIMING, true, false)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_PARAM", [__LIST(MIG_RRTSRC_KEYWORD_LIST_PARAM, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_JOB", [__LIST(MIG_RRTSRC_KEYWORD_LIST_JOB, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_JOB_SERIES", [__LIST(MIG_RRTSRC_KEYWORD_LIST_JOB_SERIES, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_PROB", ["((?:\\d+%)|" + regTextFragProbText + ")"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_TARGET", [__LIST(MIG_RRTSRC_KEYWORD_LIST_TARGET, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_RACE", [__LIST(MIG_RRTSRC_KEYWORD_LIST_RACE, true, true), "の?"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_ELEMENT", [__LIST(MIG_RRTSRC_KEYWORD_LIST_ELM, true, true), "の?属性の?"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_SIZE", [__LIST(MIG_RRTSRC_KEYWORD_LIST_SIZE, true, true), "の?(?:(?:型)|(?:サイズ))の?"]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_BOSS", [__LIST(MIG_RRTSRC_KEYWORD_LIST_BOSS, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_PLAYER", [__LIST(MIG_RRTSRC_KEYWORD_LIST_PLAYER, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_ITEM_TYPE", [__LIST(MIG_RRTSRC_KEYWORD_LIST_ITEM_TYPE, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_DISEFFECT_TARGET", [__LIST(MIG_RRTSRC_KEYWORD_LIST_DISEFFECT_TARGET, true, true)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_BORDER_FLAG", [__LIST(MIG_RRTSRC_KEYWORD_LIST_BORDER_FLAG, true, false)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_TIME_UNIT", [__LIST(MIG_RRTSRC_KEYWORD_LIST_TIME_UNIT, true, false)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_BLOCKED_LIST_AND_LV", ["((?:" + "(?:\\[[^\\]]+\\]\\s*" + regTextFragWordLevel + "\\s*\\d+)" + "|" + "(?:、)|(?:,)|(?:，)" + ")+)"]);

		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_STATIC_TYPE", [__LIST(MIG_RRTSRC_KEYWORD_LIST_STATIC_TYPE, true, false)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_STATIC_POSITION", [__LIST(MIG_RRTSRC_KEYWORD_LIST_STATIC_POSITION, true, false)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_STATIC_ELEMENT", [__LIST(MIG_RRTSRC_KEYWORD_LIST_ELM, true, false)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_STATIC_REFINABLE", [__LIST(MIG_RRTSRC_KEYWORD_LIST_STATIC_REFINABLE, true, false)]);
		funcRegisterCore("MIG_RRTSRC_CORE_MATCHER_STATIC_BREAKABLE", [__LIST(MIG_RRTSRC_KEYWORD_LIST_STATIC_BREAKABLE, true, false)]);



		// 汎用データマッチャ
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_INTEGER", [__OPT(MIG_RRTSRC_CORE_MATCHER_SIGN), __MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER), __OPT(MIG_RRTSRC_CORE_MATCHER_DIMENSION), __OPT(MIG_RRTSRC_CORE_MATCHER_VARY_DIRECT)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_NUMBER", [__OPT(MIG_RRTSRC_CORE_MATCHER_SIGN), __MUST(MIG_RRTSRC_CORE_MATCHER_NUMBER), __OPT(MIG_RRTSRC_CORE_MATCHER_DIMENSION), __OPT(MIG_RRTSRC_CORE_MATCHER_VARY_DIRECT)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_VARY_DIRECT", [__MUST(MIG_RRTSRC_CORE_MATCHER_VARY_DIRECT)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STRING", [__MUST(MIG_RRTSRC_CORE_MATCHER_STRING)]);

		// データマッチャ
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_LEVEL", [regTextFragWordLevel, __MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_SLOT", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_PARAM", [__MUST(MIG_RRTSRC_CORE_MATCHER_PARAM)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_TRIGGER", [__OPT(MIG_RRTSRC_CORE_MATCHER_METHOD), __MUST(MIG_RRTSRC_CORE_MATCHER_TIMING), __OPT(MIG_RRTSRC_CORE_MATCHER_COMMA)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATE", [__MUST(MIG_RRTSRC_CORE_MATCHER_NAME_LIST), "(?:状態)?"], CMigRrtSrcMatcherLibrary.ExtraCheckStateName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATELESS", [__MUST(MIG_RRTSRC_CORE_MATCHER_NOT_BLOCKED_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckStateName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_BUFF", [__MUST(MIG_RRTSRC_CORE_MATCHER_NAME_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckBuffName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_ITEM", [__MUST(MIG_RRTSRC_CORE_MATCHER_NAME_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckItemName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_CARD", [__MUST(MIG_RRTSRC_CORE_MATCHER_NAME_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckCardName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_ARROW", [__MUST(MIG_RRTSRC_CORE_MATCHER_BLOCKED_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckArrowName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_PET", [__MUST(MIG_RRTSRC_CORE_MATCHER_BLOCKED_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckPetName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_EQUIPABLE", [__MUST(MIG_RRTSRC_CORE_MATCHER_NAME_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckEquipableName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_SKILL", [__MUST(MIG_RRTSRC_CORE_MATCHER_NAME_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckSkillName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_SKILL_AND_LV", [__MUST(MIG_RRTSRC_CORE_MATCHER_BLOCKED_LIST_AND_LV)], CMigRrtSrcMatcherLibrary.ExtraCheckSkillNameAndLv);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_JOB", [__MUST(MIG_RRTSRC_CORE_MATCHER_JOB)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_JOB_SERIES", [__MUST(MIG_RRTSRC_CORE_MATCHER_JOB_SERIES)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_EQUIPPING_JOB", [__MUST(MIG_RRTSRC_CORE_MATCHER_NOT_BLOCKED_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckEquippingJobName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_EQUIPPING_JOB_SERIES", [__MUST(MIG_RRTSRC_CORE_MATCHER_NOT_BLOCKED_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckEquippingJobSeriesName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_ITEM_EQUIP_REGION", [__MUST(MIG_RRTSRC_CORE_MATCHER_NAME_LIST), "[のをは]"], CMigRrtSrcMatcherLibrary.ExtraCheckItemEquipRegionName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_ITEM_TYPE", [__MUST(MIG_RRTSRC_CORE_MATCHER_ITEM_TYPE)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_MONSTER", [__MUST(MIG_RRTSRC_CORE_MATCHER_BLOCKED_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckMonsterName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_MAP_MONSTER", [__MUST(MIG_RRTSRC_CORE_MATCHER_BLOCKED_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckMapName);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_PROB", [__MUST(MIG_RRTSRC_CORE_MATCHER_PROB), "の?", "確率で?"]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_PROB_UP", ["(?:(?:確率)|(?:発動率)|(?:発動確率))が", "(?:更に)?", "(?:(?:上昇する)|(?:上昇))"]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_SPAN", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER), __MUST(MIG_RRTSRC_CORE_MATCHER_TIME_UNIT), "間"]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_INTERVAL", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER), __MUST(MIG_RRTSRC_CORE_MATCHER_TIME_UNIT), "(?:(?:ごと)|(?:毎))"]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_TARGET", [__MUST(MIG_RRTSRC_CORE_MATCHER_TARGET)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_AREA", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER), "(?:(?:\\*)|(?:x))?", __OPT(MIG_RRTSRC_CORE_MATCHER_INTEGER), "セル(?:範囲)?の"]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_RACE", [__MUST(MIG_RRTSRC_CORE_MATCHER_RACE)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_ELEMENT", [__MUST(MIG_RRTSRC_CORE_MATCHER_ELEMENT)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_ELEMENT_MONSTER", [__MUST(MIG_RRTSRC_CORE_MATCHER_ELEMENT)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_ELEMENT_ATTACK", [__MUST(MIG_RRTSRC_CORE_MATCHER_ELEMENT)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_ELEMENT_MAGIC", [__MUST(MIG_RRTSRC_CORE_MATCHER_ELEMENT)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_SIZE", [__MUST(MIG_RRTSRC_CORE_MATCHER_SIZE)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_BOSS", [__MUST(MIG_RRTSRC_CORE_MATCHER_BOSS)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_PLAYER", [__MUST(MIG_RRTSRC_CORE_MATCHER_PLAYER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_DISEFFECT_TARGET", [__MUST(MIG_RRTSRC_CORE_MATCHER_DISEFFECT_TARGET)]);

		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_BORDER_BASE", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG", [__MUST(MIG_RRTSRC_CORE_MATCHER_BORDER_FLAG), "、?"]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_PURE_PARAM", ["純粋な", __MUST(MIG_RRTSRC_CORE_MATCHER_PARAM), "(?:の合計)?"]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_CANCEL_EFFECT", [__MUST(MIG_RRTSRC_CORE_MATCHER_NAME_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckCancelEffectName);

		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_TYPE", [__MUST(MIG_RRTSRC_CORE_MATCHER_STATIC_TYPE)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_POSITION", [__MUST(MIG_RRTSRC_CORE_MATCHER_STATIC_POSITION)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_WEAPON_LEVEL", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_ELEMENT", [__MUST(MIG_RRTSRC_CORE_MATCHER_STATIC_ELEMENT)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_SLOT", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_ATK", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_MATK", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_DEF", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_MDEF", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_REFINABLE", [__MUST(MIG_RRTSRC_CORE_MATCHER_STATIC_REFINABLE)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_BREAKABLE", [__MUST(MIG_RRTSRC_CORE_MATCHER_STATIC_BREAKABLE)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_WEIGHT", [__MUST(MIG_RRTSRC_CORE_MATCHER_NUMBER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_REQUIRED_LEVEL", [__MUST(MIG_RRTSRC_CORE_MATCHER_INTEGER)]);
		funcRegisterData("MIG_RRTSRC_DATA_MATCHER_STATIC_REQUIRED_JOB", [__MUST(MIG_RRTSRC_CORE_MATCHER_SPACED_LIST)], CMigRrtSrcMatcherLibrary.ExtraCheckRequiredJobName);



		// 条件マッチャ
		// 処理時間の関係から、セット条件を最優先にする
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_EQUIP_WITH_ONE", MIG_EQUIPABLE_SP_CONDITION_ID_EQUIP_WITH_ONE, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "のいずれか", "と共に装備時", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_EQUIP_WITH_ALL", MIG_EQUIPABLE_SP_CONDITION_ID_EQUIP_WITH_ALL, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "(?:(?:と)|(?:を))共に装備時", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_EQUIP_WITH_ALL_V2", MIG_EQUIPABLE_SP_CONDITION_ID_EQUIP_WITH_ALL_V2, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "を(?:すべて)装備時", "、?"]);
		// 以下は順序不問
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_BASE_LEVEL", MIG_EQUIPABLE_SP_CONDITION_ID_BASE_LEVEL, [regTextFragWordBaseLevel, "が?", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_PURE_PARAM", MIG_EQUIPABLE_SP_CONDITION_ID_PURE_PARAM, [__MUST(MIG_RRTSRC_DATA_MATCHER_PURE_PARAM), "が", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_ITEM_REFINED", MIG_EQUIPABLE_SP_CONDITION_ID_ITEM_REFINED, [__OPT(MIG_RRTSRC_DATA_MATCHER_ITEM), "(?:の)?", regTextFragWordRefine, "値が?", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_ITEM_REFINED_OLD", MIG_EQUIPABLE_SP_CONDITION_ID_ITEM_REFINED_OLD, [__OPT(MIG_RRTSRC_DATA_MATCHER_ITEM), "(?:の)?", regTextFragWordRefine, "値が?", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_ITEM_EQUIP_REGION_REFINED", MIG_EQUIPABLE_SP_CONDITION_ID_ITEM_EQUIP_REGION_REFINED, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM_EQUIP_REGION), regTextFragWordRefine, "値が?", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_ITEM_TYPE_REFINED", MIG_EQUIPABLE_SP_CONDITION_ID_ITEM_TYPE_REFINED, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM_TYPE), "(?:の)?", regTextFragWordRefine, "値が?", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_LEARNED", MIG_EQUIPABLE_SP_CONDITION_ID_LEARNED, [__MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "を", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_LEARNED_LEVEL", MIG_EQUIPABLE_SP_CONDITION_ID_LEARNED_LEVEL, [__MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), regTextFragWordLevel, __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_LEARNED_LEVEL_V2", MIG_EQUIPABLE_SP_CONDITION_ID_LEARNED_LEVEL_V2, [__MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "の習得" + regTextFragWordLevel + "(?:の合計)?が", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_JOB_EQUIPPING", MIG_EQUIPABLE_SP_CONDITION_ID_JOB_EQUIPPING, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPPING_JOB), "(?:職業)?が装備(?:(?:時)|(?:すると))", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_JOB_SERIES_EQUIPPING", MIG_EQUIPABLE_SP_CONDITION_ID_JOB_SERIES_EQUIPPING, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPPING_JOB_SERIES), "(?:職業)?が装備(?:(?:時)|(?:すると))", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_PET_WITH_ONE", MIG_EQUIPABLE_SP_CONDITION_ID_PET_WITH_ONE, ["(?:(?:キュー)?ペット)?", __MUST(MIG_RRTSRC_DATA_MATCHER_PET), "のいずれか", "を連れている時", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_PET_WITH_ALL", MIG_EQUIPABLE_SP_CONDITION_ID_PET_WITH_ALL, ["(?:(?:キュー)?ペット)?", __MUST(MIG_RRTSRC_DATA_MATCHER_PET), "を連れている時", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_KILL", MIG_EQUIPABLE_SP_CONDITION_ID_KILL, ["(?:全ての)?モンスターを倒した時", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_KILL_RACE", MIG_EQUIPABLE_SP_CONDITION_ID_KILL_RACE, [__MUST(MIG_RRTSRC_DATA_MATCHER_RACE), regTextFragOptMonster + "を倒した時", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_SKILL_USED", MIG_EQUIPABLE_SP_CONDITION_ID_SKILL_USED, [__MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "(?:(?:使用時)|(?:を使用した時の?))", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_SKILL_HITTED", MIG_EQUIPABLE_SP_CONDITION_ID_SKILL_HITTED, [__MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "で?", "(?:攻撃)?命中時に?", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_ITEM_USED", MIG_EQUIPABLE_SP_CONDITION_ID_ITEM_USED, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM), "(?:のいずれか)?", "を?", "使用時", "、?"]);
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_DISARMED", MIG_EQUIPABLE_SP_CONDITION_ID_DISARMED, ["装備解除時", "、?"]);
		// 条件マッチャ（特殊）
		// テキストからのパースではなく、一定の条件が成立した際に、プログラムの処理で追加生成するもの
		funcRegisterCondition("MIG_RRTSRC_CONDITION_MATCHER_TIME_EFFECT", MIG_EQUIPABLE_SP_CONDITION_ID_TIME_EFFECT, ["時限効果をまとめるための、ダミーマッチャ"]);

		// 属性マッチャ
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_TRIGGER", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_TRIGGER, [__MUST(MIG_RRTSRC_DATA_MATCHER_TRIGGER)]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_PROB", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_PROB, [__MUST(MIG_RRTSRC_DATA_MATCHER_PROB), "、?"]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_SPAN", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_SPAN, [__MUST(MIG_RRTSRC_DATA_MATCHER_SPAN), "、?"]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_TARGET", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_TARGET, [__MUST(MIG_RRTSRC_DATA_MATCHER_TARGET), "(?:(?:を)|(?:の)|(?:に)|(?:が))?"]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_AREA", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_AREA, [__MUST(MIG_RRTSRC_DATA_MATCHER_AREA), "、?"]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_RACE", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_RACE, [__MUST(MIG_RRTSRC_DATA_MATCHER_RACE), regTextFragOptMonster, regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_ELEMENT_MONSTER", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_ELEMENT_MONSTER, [__MUST(MIG_RRTSRC_DATA_MATCHER_ELEMENT_MONSTER), regTextFragOptMonster, regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_SIZE", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_SIZE, [__MUST(MIG_RRTSRC_DATA_MATCHER_SIZE), regTextFragOptMonster, regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_BOSS", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_BOSS, [__MUST(MIG_RRTSRC_DATA_MATCHER_BOSS), regTextFragOptMonster, regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_PLAYER", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_PLAYER, [__MUST(MIG_RRTSRC_DATA_MATCHER_PLAYER), regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_ELEMENT_ATTACK", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_ELEMENT_ATTACK, [__MUST(MIG_RRTSRC_DATA_MATCHER_ELEMENT_ATTACK), "攻撃" + regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_ELEMENT_MAGIC", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_ELEMENT_MAGICAL, [__MUST(MIG_RRTSRC_DATA_MATCHER_ELEMENT_MAGIC), "魔法攻撃" + regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_STATE", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_STATE, [__MUST(MIG_RRTSRC_DATA_MATCHER_STATE), "に対する"]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_SKILL", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_SKILL, [__MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "(?:(?:で)|(?:の))"]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_MONSTER", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_MONSTER, [__MUST(MIG_RRTSRC_DATA_MATCHER_MAP_MONSTER), regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBUTE_MATCHER_MONSTER_IN_MAP", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_MAP_MONSTER, [__MUST(MIG_RRTSRC_DATA_MATCHER_MAP_MONSTER), "に出現するモンスター", regTextFragSubjectSuffix]);
		funcRegisterAttribute("MIG_RRTSRC_ATTRIBITE_MATCHER_DISEFFECT_TARGET", MIG_EQUIPABLE_SP_ATTRIBUTE_ID_DISEFFECT_TARGET, [__MUST(MIG_RRTSRC_DATA_MATCHER_DISEFFECT_TARGET), "には発動しない"]);

		// 効果マッチャ
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_PARAM", MIG_EQUIPABLE_SP_EFFECT_ID_PARAM, [__MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), "(?:(?:が))?", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_HEAL_USING", MIG_EQUIPABLE_SP_EFFECT_ID_HEAL_USING, ["ヒール系スキル使用時、HP回復量", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_HEAL_USED", MIG_EQUIPABLE_SP_EFFECT_ID_HEAL_USED, ["ヒール系スキルを受けた時のHP回復量", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_HEAL_ITEM_USED", MIG_EQUIPABLE_SP_EFFECT_ID_HEAL_ITEM_USED, ["一部の回復アイテムによるHP回復量", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_ITEM_HEAL_UP", MIG_EQUIPABLE_SP_EFFECT_ID_ITEM_HEAL_UP, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM), "(?:(?:の)|(?:使用時))、?", __OPT(MIG_RRTSRC_DATA_MATCHER_PARAM), "回復(?:(?:量)|(?:力))", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_ATTACK_DAMAGE", MIG_EQUIPABLE_SP_EFFECT_ID_ATTACK_DAMAGE, ["(?:与える)?ダメージ", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_ATTACK_DAMAGE_OLD", MIG_EQUIPABLE_SP_EFFECT_ID_ATTACK_DAMAGE_OLD, [__MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "の追加ダメージ"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_RECEIVE_DAMAGE", MIG_EQUIPABLE_SP_EFFECT_ID_RECEIVE_DAMAGE, ["受けるダメージ", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_RECEIVE_DAMAGE_OLD", MIG_EQUIPABLE_SP_EFFECT_ID_RECEIVE_DAMAGE_OLD, [__MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "の追加ダメージを受ける"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_RESIST", MIG_EQUIPABLE_SP_EFFECT_ID_RESIST, ["(?:(?:攻撃)|(?:攻撃に対する))?耐性", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_RESIST_OLD", MIG_EQUIPABLE_SP_EFFECT_ID_RESIST_OLD, ["攻撃に", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "の耐性"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_RESIST_ELM_OLD", MIG_EQUIPABLE_SP_EFFECT_ID_RESIST_ELM_OLD, [__MUST(MIG_RRTSRC_DATA_MATCHER_ELEMENT_ATTACK), "(?:(?:攻撃)|(?:攻撃に対する))?耐性", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CAST_TIME", MIG_EQUIPABLE_SP_EFFECT_ID_CAST_TIME, ["(?<!(?:固定))詠唱時間", __MUST(MIG_RRTSRC_DATA_MATCHER_NUMBER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_FIXED_TIME", MIG_EQUIPABLE_SP_EFFECT_ID_FIXED_TIME, ["固定詠唱時間", __MUST(MIG_RRTSRC_DATA_MATCHER_NUMBER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_COOL_TIME", MIG_EQUIPABLE_SP_EFFECT_ID_COOL_TIME, ["再使用待機時間", __MUST(MIG_RRTSRC_DATA_MATCHER_NUMBER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_SKILL_DELAY", MIG_EQUIPABLE_SP_EFFECT_ID_SKILL_DELAY, ["スキルディレイ", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_SKILL_COST", MIG_EQUIPABLE_SP_EFFECT_ID_SKILL_COST, ["(?:スキル使用時の)?", "(?:(?:消費SP)|(?:SP消費量))", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_EXP", MIG_EQUIPABLE_SP_EFFECT_ID_EXP, ["獲得する経験値", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_IGNORE_ALLDEF", MIG_EQUIPABLE_SP_EFFECT_ID_IGNORE_ALLDEF, ["防御力無視ダメージ", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_RANGE", MIG_EQUIPABLE_SP_EFFECT_ID_RANGE, ["射程距離", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_STATE", MIG_EQUIPABLE_SP_EFFECT_ID_STATE, [__MUST(MIG_RRTSRC_DATA_MATCHER_STATE), "(?:(?:にする)|(?:をかける)|(?:になる)|(?:がかかる))"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_STATE_PROB_UP", MIG_EQUIPABLE_SP_EFFECT_ID_STATE_PROB_UP, [__MUST(MIG_RRTSRC_DATA_MATCHER_STATE), "(?:(?:にする)|(?:をかける)|(?:になる)|(?:がかかる))", __MUST(MIG_RRTSRC_DATA_MATCHER_PROB_UP)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_BUFF", MIG_EQUIPABLE_SP_EFFECT_ID_BUFF, [__MUST(MIG_RRTSRC_DATA_MATCHER_BUFF), __OPT(MIG_RRTSRC_DATA_MATCHER_LEVEL), "(?:状態になる)?"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_IGNORE", MIG_EQUIPABLE_SP_EFFECT_ID_IGNORE, [__MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "無視"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_REFLECT", MIG_EQUIPABLE_SP_EFFECT_ID_REFLECT, ["受けたダメージの", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "を反射"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_REDUCE_REFLECT", MIG_EQUIPABLE_SP_EFFECT_ID_REDUCE_REFLECT, ["一部のダメージを反射する効果で受けるダメージ", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_USABLE_SKILL", MIG_EQUIPABLE_SP_EFFECT_ID_USABLE_SKILL, ["(?:スキル)?", __MUST(MIG_RRTSRC_DATA_MATCHER_SKILL_AND_LV), "(?:まで)?", "使用可能"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_USABLE_SKILL_AS_REFINED", MIG_EQUIPABLE_SP_EFFECT_ID_USABLE_SKILL_AS_REFINED, [__OPT(MIG_RRTSRC_DATA_MATCHER_ITEM), "(?:の)?", regTextFragWordRefine, "値と同じ" + regTextFragWordLevel + "の", __MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "使用可能"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_USABLE_SKILL_INCREASE_LEVEL", MIG_EQUIPABLE_SP_EFFECT_ID_USABLE_SKILL_INCREASE_LEVEL, [__MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "の使用可能" + regTextFragWordLevel + "が", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "上昇"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_USABLE_SKILL_FOR_DA", MIG_EQUIPABLE_SP_EFFECT_ID_USABLE_SKILL_FOR_DA, [__MUST(MIG_RRTSRC_DATA_MATCHER_SKILL_AND_LV), "が全ての武器で使用可能"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_AUTO_SPELL", MIG_EQUIPABLE_SP_EFFECT_ID_AUTO_SPELL, ["(?:オートスペル)?", __MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), __MUST(MIG_RRTSRC_DATA_MATCHER_LEVEL), regTextFragActivate]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_AUTO_SPELL_AS_LEARNED", MIG_EQUIPABLE_SP_EFFECT_ID_AUTO_SPELL_AS_LEARNED, ["(?:オートスペル)?", __MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "が", "習得" + regTextFragWordLevel + "で" + regTextFragActivate]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_AUTO_SPELL_AS_REFINED", MIG_EQUIPABLE_SP_EFFECT_ID_AUTO_SPELL_AS_REFINED, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "の", regTextFragWordRefine, "値と同じ" + regTextFragWordLevel + "の", "(?:オートスペル)?", __MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "が?", regTextFragActivate]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_AUTO_SPELL_PROB_UP", MIG_EQUIPABLE_SP_EFFECT_ID_AUTO_SPELL_PROB_UP, ["(?:オートスペル)?", __MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), __OPT(MIG_RRTSRC_DATA_MATCHER_LEVEL), "の", __MUST(MIG_RRTSRC_DATA_MATCHER_PROB_UP)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_AUTO_BUFF_PROB_UP", MIG_EQUIPABLE_SP_EFFECT_ID_AUTO_BUFF_PROB_UP, [__MUST(MIG_RRTSRC_DATA_MATCHER_BUFF), "の", __MUST(MIG_RRTSRC_DATA_MATCHER_PROB_UP)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_AUTO_BUFF_PROB_UP_EQUIPABLE", MIG_EQUIPABLE_SP_EFFECT_ID_AUTO_BUFF_PROB_UP_EQUIPABLE, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "の", __MUST(MIG_RRTSRC_DATA_MATCHER_BUFF), __OPT(MIG_RRTSRC_DATA_MATCHER_LEVEL), "状態になる", __MUST(MIG_RRTSRC_DATA_MATCHER_PROB_UP)]);

		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_BODY_ELEMENT", MIG_EQUIPABLE_SP_EFFECT_ID_BODY_ELEMENT, ["鎧に", __MUST(MIG_RRTSRC_DATA_MATCHER_ELEMENT), "を付与する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_DRAIN_PARAM", MIG_EQUIPABLE_SP_EFFECT_ID_DRAIN_PARAM, ["与えたダメージの", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "を", __MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), "として吸収"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_DRAIN_PARAM_VALUE_VARY", MIG_EQUIPABLE_SP_EFFECT_ID_DRAIN_PARAM_VALUE_VARY, [__MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), "の吸収量", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_DRAIN_PARAM_PROB_UP", MIG_EQUIPABLE_SP_EFFECT_ID_DRAIN_PARAM_PROB_UP, [__MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), "の吸収", __MUST(MIG_RRTSRC_DATA_MATCHER_PROB_UP)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_REFLECT_MAGIC", MIG_EQUIPABLE_SP_EFFECT_ID_REFLECT_MAGIC, ["ターゲッティング魔法を", __MUST(MIG_RRTSRC_DATA_MATCHER_PROB), "反射"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_TIMELY_PARAM", MIG_EQUIPABLE_SP_EFFECT_ID_TIMELY_PARAM, [__MUST(MIG_RRTSRC_DATA_MATCHER_INTERVAL), "に", __MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_HEAL_PARAM", MIG_EQUIPABLE_SP_EFFECT_ID_HEAL_PARAM, [__MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), "を", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "回復する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_INCREASE_PARAM", MIG_EQUIPABLE_SP_EFFECT_ID_INCREASE_PARAM, [__MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), "が?", "上昇(?:する)?"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_REDUCE_SP", MIG_EQUIPABLE_SP_EFFECT_ID_REDUCE_SP, ["敵のMaxSPの", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "にあたるSPを減少"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_REDUCE_SP_OLD", MIG_EQUIPABLE_SP_EFFECT_ID_REDUCE_SP_OLD, ["すべての敵SPを", __MUST(MIG_RRTSRC_DATA_MATCHER_INTEGER), "消去する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CURE_STATE", MIG_EQUIPABLE_SP_EFFECT_ID_CURE_STATE, [__MUST(MIG_RRTSRC_DATA_MATCHER_STATE), "を(?:(?:解除)|(?:回復))する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CLEAR_BUFF", MIG_EQUIPABLE_SP_EFFECT_ID_CLEAR_BUFF, [__MUST(MIG_RRTSRC_DATA_MATCHER_BUFF), "を解除する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CLEAR_BUFF_V2", MIG_EQUIPABLE_SP_EFFECT_ID_CLEAR_BUFF_V2, [__MUST(MIG_RRTSRC_DATA_MATCHER_BUFF), "の効果を解除する"]);		// なぜか、「の効果」部分をブロック化して数量指定子つけてもうまいくいかない
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_DROP_ITEM", MIG_EQUIPABLE_SP_EFFECT_ID_DROP_ITEM, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM), "(?:を)?ドロップ"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_DROP_ITEM_PROB_UP", MIG_EQUIPABLE_SP_EFFECT_ID_DROP_ITEM_PROB_UP, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM), "(?:(?:が)|(?:の))", "ドロップ(?:する)?", __MUST(MIG_RRTSRC_DATA_MATCHER_PROB_UP)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_STATELESS", MIG_EQUIPABLE_SP_EFFECT_ID_STATELESS, ["絶対に", __MUST(MIG_RRTSRC_DATA_MATCHER_STATELESS), "(?:(?:状態にならない)|(?:しない))"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_IMMORTAL", MIG_EQUIPABLE_SP_EFFECT_ID_IMMORTAL, ["(?:(?:絶対に壊れない)|(?:破壊不可))"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_KNOCKBACKLESS", MIG_EQUIPABLE_SP_EFFECT_ID_KNOCKBACKLESS, ["絶対にノックバックしない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_TRUE_SIGHT", MIG_EQUIPABLE_SP_EFFECT_ID_TRUE_SIGHT, ["\\[ハイディング\\]や\\[クローキング\\]をしているモンスターが見える"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_PERFECTION", MIG_EQUIPABLE_SP_EFFECT_ID_PERFECTION, ["全てのモンスターに対し、サイズによる武器ダメージのペナルティが発生しない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_PENETRATE_DEF", MIG_EQUIPABLE_SP_EFFECT_ID_PENETRATE_DEF, ["防御力を無視"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_PENETRATE_DEF_V2", MIG_EQUIPABLE_SP_EFFECT_ID_PENETRATE_DEF_V2, ["防御力無視ダメージ"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_KIRI_EFFECT", MIG_EQUIPABLE_SP_EFFECT_ID_KIRI_EFFECT, ["相手の防御力が高いほど与えるダメージが増加"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_COMA_EFFECT", MIG_EQUIPABLE_SP_EFFECT_ID_COMA_EFFECT, ["(?:敵を)?", "瀕死にする"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_DEF_DIVIDE_HALF", MIG_EQUIPABLE_SP_EFFECT_ID_DEF_DIVIDE_HALF, ["装備すると防御力が半分に低下する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_ANTI_INTERRUPT", MIG_EQUIPABLE_SP_EFFECT_ID_ANTI_INTERRUPT, ["詠唱が中断されない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_SPLASH_DAMAGE", MIG_EQUIPABLE_SP_EFFECT_ID_SPLASH_DAMAGE, ["スプラッシュダメージ"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_MOVE_UP", MIG_EQUIPABLE_SP_EFFECT_ID_MOVE_UP, ["移動速度増加"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_REINCARNATION", MIG_EQUIPABLE_SP_EFFECT_ID_REINCARNATION, ["戦闘不能から復活時、HP・SPを100%回復する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_UNREFINABLE", MIG_EQUIPABLE_SP_EFFECT_ID_UNREFINABLE, [regTextFragWordRefine, "不可"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_GRAPHICAL", MIG_EQUIPABLE_SP_EFFECT_ID_GRAPHICAL, ["キャラクターにグラフィックが反映される"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_EFFECTIC_EQUIP", MIG_EQUIPABLE_SP_EFFECT_ID_EFFECTIC_EQUIP, ["エフェクト装備のため、エフェクト\\(/effect\\)をOFFにしていると表示されない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANNOT_HIDE_BY_COSTUME", MIG_EQUIPABLE_SP_EFFECT_ID_CANNOT_HIDE_BY_COSTUME, ["この装備は、衣装装備で隠すことができない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_TOWN_MAP_ONLY", MIG_EQUIPABLE_SP_EFFECT_ID_TOWN_MAP_ONLY, ["下記効果は街マップで使用時のみ効果があります"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CHANGE_MONSTER", MIG_EQUIPABLE_SP_EFFECT_ID_CHANGE_MONSTER, ["ある確率で敵を他のモンスターに変える"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_TRANSFORM_MONSTER", MIG_EQUIPABLE_SP_EFFECT_ID_TRANSFORM_MONSTER, [regTextFragOptMonster, __MUST(MIG_RRTSRC_DATA_MATCHER_MONSTER), "に変身(?:する)?"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_TRANSFORM_MONSTER_PROB_UP", MIG_EQUIPABLE_SP_EFFECT_ID_TRANSFORM_MONSTER_PROB_UP, [regTextFragOptMonster, __MUST(MIG_RRTSRC_DATA_MATCHER_MONSTER), "に変身(?:する)?", __MUST(MIG_RRTSRC_DATA_MATCHER_PROB_UP)]);

		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_NO_ITEM_USED", MIG_EQUIPABLE_SP_EFFECT_ID_NO_ITEM_USED, ["スキル使用時", __MUST(MIG_RRTSRC_DATA_MATCHER_ITEM), "を消費しない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_SPECIAL_RUNE_EFFECT", MIG_EQUIPABLE_SP_EFFECT_ID_SPECIAL_RUNE_EFFECT, ["ルーンナイトがルーンストーンスキルを発動時、?", "ルーンストーンスキルの効果が強化されるまたは自分自身に対して様々な効果が付与される"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANCEL_EFFECT_GENERAL", MIG_EQUIPABLE_SP_EFFECT_ID_CANCEL_EFFECT_GENERAL, [__MUST(MIG_RRTSRC_DATA_MATCHER_CANCEL_EFFECT), "効果が発動しない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANCEL_EFFECT_SET", MIG_EQUIPABLE_SP_EFFECT_ID_CANCEL_EFFECT_SET, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "効果が発動しない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANCEL_BUFF_GVG", MIG_EQUIPABLE_SP_EFFECT_ID_CANCEL_BUFF_GVG, ["攻城戦・新攻城戦・攻城戦TEの砦内・PvP・ターボトラックでは", __MUST(MIG_RRTSRC_DATA_MATCHER_BUFF), "の追加効果は発揮されず、?", "解除されます"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANCEL_EFFECT_GVGTE", MIG_EQUIPABLE_SP_EFFECT_ID_CANCEL_EFFECT_GVGTE, ["この効果は攻城戦TEでは発動しない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANCEL_EFFECT_SKILL", MIG_EQUIPABLE_SP_EFFECT_ID_CANCEL_EFFECT_SKILL, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "の", __MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "の", __MUST(MIG_RRTSRC_DATA_MATCHER_CANCEL_EFFECT), "効果が発動しない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANCEL_EFFECT_STATE", MIG_EQUIPABLE_SP_EFFECT_ID_CANCEL_EFFECT_STATE, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "の", "敵を", __MUST(MIG_RRTSRC_DATA_MATCHER_STATE), "にする", "効果が発動しない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANCEL_EFFECT_AUTO_SPELL", MIG_EQUIPABLE_SP_EFFECT_ID_CANCEL_EFFECT_AUTO_SPELL, [__MUST(MIG_RRTSRC_DATA_MATCHER_EQUIPABLE), "効果による", "(?:オートスペル)?", __MUST(MIG_RRTSRC_DATA_MATCHER_SKILL), "が発動しない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CAN_SELL_NPC", MIG_EQUIPABLE_SP_EFFECT_ID_CAN_SELL_NPC, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM), "は、?", "NPC売却が可能です"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CANNOT_TRADE", MIG_EQUIPABLE_SP_EFFECT_ID_CANNOT_TRADE, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM), "は、?", "NPC売却・倉庫への移動のみ可能です"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_CHARA_BIND", MIG_EQUIPABLE_SP_EFFECT_ID_CHARA_BIND, ["ドロップ・交換ウィンドウ倉庫・カート・NPC売却等一切の移動が行なえない"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_VANISH_EFFECT", MIG_EQUIPABLE_SP_EFFECT_ID_VANISH_EFFECT, ["(?:下記)?特殊効果は.*消滅する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_VANISH_EFFECT_V2", MIG_EQUIPABLE_SP_EFFECT_ID_VANISH_EFFECT_V2, ["(?:\\d+[年\\/])?(?:\\d+[月\\/])(?:\\d+日?)\\s*(?:\\d+時)?.*", "((?:上記)|(?:下記))?特殊効果は.*消滅する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_VANISH_EFFECT_AND_CHARA_BIND", MIG_EQUIPABLE_SP_EFFECT_ID_VANISH_EFFECT_AND_CHARA_BIND, ["(?:下記)?特殊効果と移動制限は.*消滅する"]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_SECRET_EFFECT", MIG_EQUIPABLE_SP_EFFECT_ID_SECRET_EFFECT, ["(?:特定の装備と組み合わせる事により)?(?:(?:隠された力)|(?:秘められた効果)|(?:追加効果))が発動する"]);


		// 旧来の曖昧な表記用マッチャ
		// ベースは現代表記の定義を流用。データの補正は、DataMaker.part.99.js 等で、手動で書き加える。
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_PARAM_OLD_VAGUE", MIG_EQUIPABLE_SP_EFFECT_ID_PARAM_OLD_VAGUE, [__MUST(MIG_RRTSRC_DATA_MATCHER_PARAM), "(?:(?:が))?", __MUST(MIG_RRTSRC_DATA_MATCHER_VARY_DIRECT)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_IGNORE_MDEF_OLD_VAGUE", MIG_EQUIPABLE_SP_EFFECT_ID_IGNORE_MDEF_OLD_VAGUE, ["相手の魔法防御力を無視する効果が", __MUST(MIG_RRTSRC_DATA_MATCHER_VARY_DIRECT)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_SKILL_DELAY_OLD_VAGUE", MIG_EQUIPABLE_SP_EFFECT_ID_SKILL_DELAY_OLD_VAGUE, ["スキルディレイ", __MUST(MIG_RRTSRC_DATA_MATCHER_VARY_DIRECT)]);
		funcRegisterEffect("MIG_RRTSRC_EFFECT_MATCHER_AUTO_SPELL_OLD_VAGUE", MIG_EQUIPABLE_SP_EFFECT_ID_AUTO_SPELL_OLD_VAGUE, ["(?:(?:ボルト系スキルLv1～3が発動)|(?:同時に複数の魔法攻撃が発動する)|(?:様々なスキルがオートスペルで発動))"]);


		// 固定情報マッチャ
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_TYPE", MIG_EQUIPABLE_SP_STATIC_ID_TYPE, ["系列", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_TYPE)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_POSITION", MIG_EQUIPABLE_SP_STATIC_ID_POSITION, ["位置", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_POSITION)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_WEAPON_LEVEL", MIG_EQUIPABLE_SP_STATIC_ID_SLOT, ["武器レベル", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_WEAPON_LEVEL)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_ELEMENT", MIG_EQUIPABLE_SP_STATIC_ID_ELEMENT, ["属性", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_ELEMENT)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_SLOT", MIG_EQUIPABLE_SP_STATIC_ID_SLOT, ["スロット", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_SLOT)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_ATK", MIG_EQUIPABLE_SP_STATIC_ID_ATK, ["(?:(?:Atk)|(?:攻撃))", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_ATK)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_MATK", MIG_EQUIPABLE_SP_STATIC_ID_MATK, ["Matk", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_MATK)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_DEF", MIG_EQUIPABLE_SP_STATIC_ID_DEF, ["(?:(?:Def)|(?:防御))", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_DEF)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_MDEF", MIG_EQUIPABLE_SP_STATIC_ID_MDEF, ["Mdef", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_MDEF)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_REFINABLE", MIG_EQUIPABLE_SP_STATIC_ID_REFINABLE, [regTextFragWordRefine, ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_REFINABLE)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_BREAKABLE", MIG_EQUIPABLE_SP_STATIC_ID_BREAKABLE, ["破損", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_BREAKABLE)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_WEIGHT", MIG_EQUIPABLE_SP_STATIC_ID_WEIGHT, ["重量", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_WEIGHT)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_REQUIRED_LEVEL", MIG_EQUIPABLE_SP_STATIC_ID_REQUIRED_LEVEL, ["(?:(?:要求レベル)|(?:レベル制限))", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_REQUIRED_LEVEL)]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_REQUIRED_LEVEL_NONE", MIG_EQUIPABLE_SP_STATIC_ID_REQUIRED_LEVEL_NONE, ["(?:(?:要求レベル)|(?:レベル制限))", ":", "なし"]);
		funcRegisterStatic("MIG_RRTSRC_STATIC_MATCHER_REQUIRED_JOB", MIG_EQUIPABLE_SP_STATIC_ID_REQUIRED_JOB, ["装備", ":", __MUST(MIG_RRTSRC_DATA_MATCHER_STATIC_REQUIRED_JOB)]);

		// エンチャントリスト用マッチャ
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_TARGET_LIST", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_TARGET_LIST, [__MUST(MIG_RRTSRC_DATA_MATCHER_ITEM)]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_NTH_STAGE", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_NTH_STAGE, ["第", __MUST(MIG_RRTSRC_DATA_MATCHER_SLOT), "段階"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_NTH_STAGE_V2", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_NTH_STAGE_V2, [__MUST(MIG_RRTSRC_DATA_MATCHER_SLOT), "段階目"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_NTH_ENCHANT", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_NTH_ENCHANT, ["第", __MUST(MIG_RRTSRC_DATA_MATCHER_SLOT), "の?", "エンチャント"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_NTH_SLOT", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_NTH_SLOT, ["第", __MUST(MIG_RRTSRC_DATA_MATCHER_SLOT), "スロット"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_NTH_SLOT_V2", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_NTH_SLOT_V2, [__MUST(MIG_RRTSRC_DATA_MATCHER_SLOT), "番目のスロット"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_NTH_SLOT_V3", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_NTH_SLOT_V3, ["スロット", __MUST(MIG_RRTSRC_DATA_MATCHER_SLOT)]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_NTH_SLOT_V4", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_NTH_SLOT_V4, [__MUST(MIG_RRTSRC_DATA_MATCHER_SLOT), "スロット目"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_NTH_SELECT", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_NTH_SELECT, [__MUST(MIG_RRTSRC_DATA_MATCHER_SLOT), "番目に", "選択できる", "エンチャント"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_POSITION_SLOT_ENCHANT", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_POSITION_SLOT_ENCHANT, ["スロットエンチャント"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_REFINE_CONDITION", MIG_EQUIPABLE_SP_LIST_DATA_ID_REFINE_CONDITION, ["※?", regTextFragWordRefine, "値が", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG), "(?:(?:以下がエンチャントされる場合があります。)|(?:以下を選択可能です。))"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_REFINE_CONDITION_V2", MIG_EQUIPABLE_SP_LIST_DATA_ID_REFINE_CONDITION_V2, ["[（\\(]?", regTextFragWordRefine, "値", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG), "エンチャント可能", "[）\\)]?"]);
		funcRegisterCondition("MIG_RRTSRC_LIST_DATA_MATCHER_REFINE_CONDITION_V3", MIG_EQUIPABLE_SP_LIST_DATA_ID_REFINE_CONDITION_V3, ["：", regTextFragWordRefine, "値", __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_BASE), __MUST(MIG_RRTSRC_DATA_MATCHER_BORDER_FLAG)]);
		funcRegisterEffect("MIG_RRTSRC_LIST_DATA_MATCHER_ENCHANT_EFFECT_LIST", MIG_EQUIPABLE_SP_LIST_DATA_ID_ENCHANT_EFFECT_LIST, [__MUST(MIG_RRTSRC_DATA_MATCHER_CARD)]);





	}).call(this);

}




/**
 * ブロックリストを要素の配列に分割する.
 * @param dataText ブロックリストのテキスト
 */
CMigRrtSrcMatcherLibrary.SplitBlockedList = function (dataText) {

	var idxBlocked = 0;
	var ret = null;

	var posOpen = 0;
	var posClose = 0;
	var posWork = 0;
	var bBlockedWithEnumText = false;

	var dataBlocked = null;
	var dataTextWork = "";
	var dataSplitted = null;

	var regExpBlocked = /^\[(.+)\](?:と)?$/;



	// ブロック要素内部は分割しないので、それを補正する
	dataBlocked = [];
	dataTextWork = dataText;
	while (dataTextWork.length > 0) {

		// 各括弧の先頭位置を取得
		posOpen = dataTextWork.indexOf("[");
		posClose = dataTextWork.indexOf("]");

		// 対応する括弧に補正する
		posWork = posOpen;
		do {
			posWork = dataTextWork.indexOf("[", posWork + 1);

			if (posWork < 0) {
				break;
			}

			if (posWork > posClose) {
				break;
			}

			posClose = dataTextWork.indexOf("]", posClose + 1);

			if (posClose < 0) {
				break;
			}

		} while (true);

		if ((0 <= posOpen) && (posOpen < posClose)) {
			dataBlocked.push(dataTextWork.substring(0, posOpen));
			dataBlocked.push(dataTextWork.substring(posOpen, posClose + 1));

			// 残りの文字列を切り出す
			dataTextWork = dataTextWork.substring(posClose + 1);

			// ブロック要素の直後に、列挙を示す文字が存在する場合、
			// すなわち、残りの文字列の先頭文字が、列挙を示す文字の場合は、残りの文字列を補正する
			if ((/^と/.test(dataTextWork)) && (posWork == (posClose + 1 + 1))) {
				dataTextWork = dataTextWork.substring(1);
			}
		}
		else {
			dataBlocked.push(dataTextWork);
			dataTextWork = "";
		}
	}

	// データテキストブロック配列をセパレータで分割
	dataSplitted = [];
	for (idxBlocked = 0; idxBlocked < dataBlocked.length; idxBlocked++) {

		if (dataBlocked[idxBlocked].length == 0) {
			continue;
		}

		// ブロック要素は分割しない
		ret = regExpBlocked.exec(dataBlocked[idxBlocked]);

		if (ret) {
			dataSplitted.push(ret[1]);
		}
		else {
			dataSplitted = dataSplitted.concat(dataBlocked[idxBlocked].split(/(?:(?:,)|(?:，)|(?:、)|(?:・)|(?: )|(?:　))/i));
		}
	}



	return dataSplitted;
};

/**
 * ブロック要素の括弧を除去する.
 * @param value ブロック要素のテキスト
 * @return 括弧を除去したテキスト
 */
CMigRrtSrcMatcherLibrary.TrimBlockBrackets = function (value) {

	// 装備品がスロット表記付きで表記され、かつ、括弧で囲まれていない場合
	if (/^[^\s*[^\[].*\[\d+\]\s*(?:と)?\s*$/.test(value)) {
		return value.trim();
	}

	// 上記以外の場合
	return value.replace(/^\[/, "").replace(/\](?:と)?$/, "").trim();
};

CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon = function (matchedTreeValue, funcCheckName) {

	var idx = 0;

	var valueList = null;
	var valueTrimed = "";

	// キャプチャされていない場合は、真とする
	if (!matchedTreeValue) {
		return true;
	}

	valueList = CMigRrtSrcMatcherLibrary.SplitBlockedList(matchedTreeValue);

	// すべての要素を処理
	for (idx = 0; idx < valueList.length; idx++) {

		// 括弧をトリミング
		valueTrimed = CMigRrtSrcMatcherLibrary.TrimBlockBrackets(valueList[idx]);

		if (valueTrimed == "") {
			continue;
		}

		if (!funcCheckName(valueTrimed)) {
			return false;
		}
	}

	return true;
};

CMigRrtSrcMatcherLibrary.ExtraCheckStateName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_constDataManager.GetIdByName(CONST_DATA_KIND_STATE, nameF.replace(/状態$/, "")) >= 0);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckBuffName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_constDataManager.GetIdByName(CONST_DATA_KIND_BUFF, nameF.replace(/状態$/, "")) >= 0);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckSkillName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_skillManager.GetSkillIdByName(nameF) >= 0);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckSkillNameAndLv = function (matchedTreeValue) {

	var regLv = new RegExp("(?:(?:Lv)|(?:レベル))\\d+", "i");
	var expectedPattern = 0;

	expectedPattern = 1;

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameOrLvF) {

			switch (expectedPattern) {

			case 1:
				if (g_skillManager.GetSkillIdByName(nameOrLvF) < 0) {
					return false;
				}
				expectedPattern = 2;
				break;

			case 2:
				if (!regLv.test(nameOrLvF)) {
					return false;
				}
				expectedPattern = 1;
				break;

			}

			return true;
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckItemName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_constDataManager.GetIdByNameSlotted(CONST_DATA_KIND_ITEM, nameF) >= 0);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckCardName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_constDataManager.GetIdByName(CONST_DATA_KIND_CARD, nameF) >= 0);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckArrowName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_constDataManager.GetIdByName(CONST_DATA_KIND_ARROW, nameF) >= 0);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckPetName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {

			var idxF = 0;

			for (idxF = 0; idxF < PET_OBJ.length; idxF++) {
				if (PET_OBJ[idxF][PET_DATA_INDEX_NAME] == nameF) {
					return true;
				}
			}

			return false;
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckEquipableName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {

			var idxF = 0;

			if (g_constDataManager.GetIdByNameSlotted(CONST_DATA_KIND_ITEM, nameF) >= 0) {
				return true;
			}

			if (g_constDataManager.GetIdByName(CONST_DATA_KIND_ARROW, nameF) >= 0) {
				return true;
			}

			if (g_constDataManager.GetIdByName(CONST_DATA_KIND_CARD, nameF) >= 0) {
				return true;
			}

			for (idxF = 0; idxF < PET_OBJ.length; idxF++) {
				if (PET_OBJ[idxF][PET_DATA_INDEX_NAME] == nameF) {
					return true;
				}
			}

			return false;
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckEquippingJobName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_MigRrtSrcKeywordInfoListLibrary.Get(MIG_RRTSRC_KEYWORD_LIST_JOB).Get(nameF) !== undefined);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckEquippingJobSeriesName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_MigRrtSrcKeywordInfoListLibrary.Get(MIG_RRTSRC_KEYWORD_LIST_JOB_SERIES).Get(nameF) !== undefined);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckItemEquipRegionName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_MigRrtSrcKeywordInfoListLibrary.Get(MIG_RRTSRC_KEYWORD_LIST_ITEM_EQUIP_REGION).Get(nameF) !== undefined);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckCancelEffectName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_MigRrtSrcKeywordInfoListLibrary.Get(MIG_RRTSRC_KEYWORD_LIST_CANCEL_EFFECT).Get(nameF) !== undefined);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckRequiredJobName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_MigRrtSrcKeywordInfoListLibrary.Get(MIG_RRTSRC_KEYWORD_LIST_STATIC_REQUIRED_JOB).Get(nameF) !== undefined);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckMonsterName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {
			return (g_constDataManager.GetIdByName(CONST_DATA_KIND_MONSTER, nameF) >= 0);
		}
	);
};

CMigRrtSrcMatcherLibrary.ExtraCheckMapName = function (matchedTreeValue) {

	return CMigRrtSrcMatcherLibrary.ExtraCheckBlockedListCommon(
		matchedTreeValue[0].value,
		function (nameF) {

			var idxF = 0;
			var idxNameF = 0;

			var nameKanaArrayF = null;

			// すべてのモンスターマップデータを検索
			for (idxF = 0; idxF < g_MonsterMapDataArray.length; idxF++) {

				// 名称カナ配列を取得
				nameKanaArrayF = g_MonsterMapDataArray[idxF][MONSTER_MAP_DATA_INDEX_NAME_KANA_ARRAY];

				// すべての名称カナを検査
				for (idxNameF = 0; idxNameF < nameKanaArrayF.length; idxNameF++) {

					// 名称が一致すれば問題なし
					if (nameKanaArrayF[idxNameF][NAME_KANA_DATA_INDEX_NAME] == nameF) {
						return true;
					}
				}
			}

			return false;
		}
	);
};





g_MigRrtSrcKeywordInfoListLibrary = new CMigRrtSrcKeywordInfoListLibrary();

g_MigRrtSrcMatcherLibrary = new CMigRrtSrcMatcherLibrary(g_MigRrtSrcKeywordInfoListLibrary);
